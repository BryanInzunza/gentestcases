```php
<?php
/**
 * This test file was generated by Bito, see more on https://github.com/gitbito/AI-Automation
 */

namespace Tests\Coppel\LegacyTmsEntregasropadistribucion\Controllers;

use Coppel\LegacyTmsEntregasropadistribucion\Controllers\RopaDistribucionController;
use Coppel\LegacyTmsEntregasropadistribucion\Models\RopaDistribucionModel;
use Coppel\RAC\Controllers\RESTController;
use Coppel\RAC\Exceptions\HTTPException;
use PHPUnit\Framework\TestCase;
use Phalcon\DI\DI;
use Phalcon\Http\Request;
use Phalcon\Logger\Logger;
use TCPDF;
use ReflectionClass;
use ReflectionMethod;
use ReflectionProperty;
use stdClass;

class RopaDistribucionControllerTest extends TestCase
{
    private $controller;
    private $modelMock;
    private $loggerMock;
    private $diMock;
    private $requestMock;

    protected function setUp(): void
    {
        parent::setUp();

        // Mock the DI container
        $this->diMock = $this->createMock(DI::class);
        
        // Mock the logger
        $this->loggerMock = $this->createMock(Logger::class);
        
        // Configure DI to return logger
        $this->diMock->method('get')
            ->with('logger')
            ->willReturn($this->loggerMock);
        
        // Set the DI mock as the default DI
        DI::setDefault($this->diMock);
        
        // Mock the model
        $this->modelMock = $this->createMock(RopaDistribucionModel::class);
        
        // Create controller with mocked dependencies
        $this->controller = $this->getMockBuilder(RopaDistribucionController::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['respond'])
            ->getMock();
        
        // Set the mocked dependencies
        $this->setPrivateProperty($this->controller, 'logger', $this->loggerMock);
        $this->setPrivateProperty($this->controller, 'modelo', $this->modelMock);
        
        // Mock the request
        $this->requestMock = $this->createMock(Request::class);
        $this->setPrivateProperty($this->controller, 'request', $this->requestMock);
        
        // Set up server global
        $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        unset($this->controller);
        unset($this->modelMock);
        unset($this->loggerMock);
        unset($this->diMock);
        unset($this->requestMock);
        
        // Reset DI
        DI::reset();
        
        // Reset server globals
        unset($_SERVER['REMOTE_ADDR']);
    }

    /**
     * Helper method to set private properties on an object
     */
    private function setPrivateProperty($object, $propertyName, $value)
    {
        $reflection = new ReflectionClass(get_class($object));
        $property = $reflection->getProperty($propertyName);
        $property->setAccessible(true);
        $property->setValue($object, $value);
    }

    /**
     * Helper method to get private properties from an object
     */
    private function getPrivateProperty($object, $propertyName)
    {
        $reflection = new ReflectionClass(get_class($object));
        $property = $reflection->getProperty($propertyName);
        $property->setAccessible(true);
        return $property->getValue($object);
    }

    /**
     * Helper method to invoke private methods on an object
     */
    private function invokePrivateMethod($object, $methodName, array $parameters = [])
    {
        $reflection = new ReflectionClass(get_class($object));
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);
        return $method->invokeArgs($object, $parameters);
    }

    /**
     * Test onConstruct method
     */
    public function testOnConstruct()
    {
        // Create a fresh controller to test onConstruct
        $controller = new RopaDistribucionController();
        
        // Invoke onConstruct manually
        $this->invokePrivateMethod($controller, 'onConstruct');
        
        // Verify that logger and model are set
        $this->assertNotNull($this->getPrivateProperty($controller, 'logger'));
        $this->assertNotNull($this->getPrivateProperty($controller, 'modelo'));
        $this->assertInstanceOf(Logger::class, $this->getPrivateProperty($controller, 'logger'));
        $this->assertInstanceOf(RopaDistribucionModel::class, $this->getPrivateProperty($controller, 'modelo'));
    }

    /**
     * Test respuestaException method
     */
    public function testRespuestaException()
    {
        // Set up logger expectations
        $this->loggerMock->expects($this->once())
            ->method('error')
            ->with($this->stringContains('Se lanzó la excepción > Test exception'));
        
        // Expect exception to be thrown
        $this->expectException(HTTPException::class);
        $this->expectExceptionMessage(RopaDistribucionController::EX1);
        $this->expectExceptionCode(500);
        
        // Call the private method
        $this->invokePrivateMethod($this->controller, 'respuestaException', ['Test exception', 500, 'testMethod']);
    }

    /**
     * Test respuestaException method with custom HTTP code
     */
    public function testRespuestaExceptionWithCustomHttpCode()
    {
        // Set up logger expectations
        $this->loggerMock->expects($this->once())
            ->method('error')
            ->with($this->stringContains('Se lanzó la excepción > Test exception'));
        
        // Expect exception to be thrown
        $this->expectException(HTTPException::class);
        $this->expectExceptionMessage(RopaDistribucionController::EX1);
        $this->expectExceptionCode(400);
        
        // Call the private method
        $this->invokePrivateMethod($this->controller, 'respuestaException', ['Test exception', 400, 'testMethod']);
    }

    /**
     * Test confirmarPaqueteRopa method - happy path
     */
    public function testConfirmarPaqueteRopaSuccess()
    {
        // Create test data
        $cedis = 123;
        $paquete = (object)[
            'numeroguia' => 'GUIA123',
            'numeropedido' => 456,
            'opc_estado' => 1
        ];
        $bodegaDistribuye = (object)[
            'numBodega' => 456,
            'nomBodegaCorto' => 'BODEGA-TEST'
        ];
        $expectedResponse = true;
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($paquete);
        
        // Configure logger expectations
        $this->loggerMock->expects($this->exactly(2))
            ->method('info');
        
        // Configure model expectations
        $this->modelMock->expects($this->once())
            ->method('consultarBodegaDistribuyeConfirmacion')
            ->with($cedis, 'GUIA123')
            ->willReturn($bodegaDistribuye);
        
        $this->modelMock->expects($this->once())
            ->method('confirmarPaqueteRopa')
            ->with(456, $paquete)
            ->willReturn($expectedResponse);
        
        // Configure respond method
        $this->controller->expects($this->once())
            ->method('respond')
            ->with(['response' => $expectedResponse])
            ->willReturn(['response' => $expectedResponse]);
        
        // Call the method
        $result = $this->controller->confirmarPaqueteRopa($cedis);
        
        // Assert the result
        $this->assertEquals(['response' => $expectedResponse], $result);
    }

    /**
     * Test confirmarPaqueteRopa method - error path with invalid JSON
     */
    public function testConfirmarPaqueteRopaWithInvalidJson()
    {
        // Create test data
        $cedis = 123;
        
        // Configure request mock to throw exception
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willThrowException(new \Exception('Invalid JSON', 400));
        
        // Configure logger expectations
        $this->loggerMock->expects($this->once())
            ->method('error')
            ->with($this->stringContains('Se lanzó la excepción > Invalid JSON'));
        
        // Expect exception
        $this->expectException(HTTPException::class);
        $this->expectExceptionMessage(RopaDistribucionController::EX1);
        $this->expectExceptionCode(400);
        
        // Call the method
        $this->controller->confirmarPaqueteRopa($cedis);
    }

    /**
     * Test confirmarPaqueteRopa method - error path with missing bodega
     */
    public function testConfirmarPaqueteRopaWithMissingBodega()
    {
        // Create test data
        $cedis = 123;
        $paquete = (object)[
            'numeroguia' => 'GUIA123',
            'numeropedido' => 456,
            'opc_estado' => 1
        ];
        $bodegaDistribuye = new stdClass(); // Empty bodega object
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($paquete);
        
        // Configure model expectations
        $this->modelMock->expects($this->once())
            ->method('consultarBodegaDistribuyeConfirmacion')
            ->with($cedis, 'GUIA123')
            ->willReturn($bodegaDistribuye);
        
        // Configure logger expectations
        $this->loggerMock->expects($this->once())
            ->method('info');
        $this->loggerMock->expects($this->once())
            ->method('error');
        
        // Expect exception
        $this->expectException(HTTPException::class);
        
        // Call the method
        $this->controller->confirmarPaqueteRopa($cedis);
    }

    /**
     * Test confirmarPaqueteRopa method - error path with database error
     */
    public function testConfirmarPaqueteRopaWithDatabaseError()
    {
        // Create test data
        $cedis = 123;
        $paquete = (object)[
            'numeroguia' => 'GUIA123',
            'numeropedido' => 456,
            'opc_estado' => 1
        ];
        $bodegaDistribuye = (object)[
            'numBodega' => 456,
            'nomBodegaCorto' => 'BODEGA-TEST'
        ];
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($paquete);
        
        // Configure model expectations
        $this->modelMock->expects($this->once())
            ->method('consultarBodegaDistribuyeConfirmacion')
            ->with($cedis, 'GUIA123')
            ->willReturn($bodegaDistribuye);
        
        $this->modelMock->expects($this->once())
            ->method('confirmarPaqueteRopa')
            ->with(456, $paquete)
            ->willThrowException(new \Exception('Database error', 500));
        
        // Configure logger expectations
        $this->loggerMock->expects($this->once())
            ->method('info');
        $this->loggerMock->expects($this->once())
            ->method('error');
        
        // Expect exception
        $this->expectException(HTTPException::class);
        $this->expectExceptionMessage(RopaDistribucionController::EX1);
        
        // Call the method
        $this->controller->confirmarPaqueteRopa($cedis);
    }

    /**
     * Test registrarEnvioClientesRopa method - happy path
     */
    public function testRegistrarEnvioClientesRopaSuccess()
    {
        // Create test data
        $cedis = 123;
        $paquete = (object)[
            'numerocasa' => '123',
            'numerocasainterior' => '',
            'observaciones' => 'Test observation with more than 100 characters to test truncation. This should be truncated to 100 characters only.',
        ];
        
        $bodegaDistribuye = (object)[
            'consecutivo' => 'CONS123',
            'numBodega' => 456,
            'numRuta' => 789,
            'numCiudadPertenece' => 101,
            'nomBodegaCorto' => 'BODEGA-TEST'
        ];
        
        $modelResponse = (object)[
            'codigobarras' => 'BARCODE123',
            'fechaservidor' => '2023-01-01',
            'fechasurtir' => '2023-01-02',
            'descripcionruta' => 'Ruta Test',
            'nombrebodega' => 'Bodega Test',
            'ciudadcliente' => 'Ciudad Test'
        ];
        
        $pdfResponse = (object)[
            'nombreArchivo' => 'etiquetaenvioclientesBARCODE123.pdf',
            'pdf' => 'base64encodedpdf'
        ];
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($paquete);
        
        // Configure model expectations
        $this->modelMock->expects($this->once())
            ->method('consultarBodegaDistribuyeRegistro')
            ->with($cedis, $paquete)
            ->willReturn($bodegaDistribuye);
        
        $this->modelMock->expects($this->once())
            ->method('registrarEnvioClientesRopa')
            ->with($cedis, 456, $this->callback(function($arg) {
                return $arg->consecutivoGuia === 'CONS123' &&
                       $arg->numbodegadistribuye === 456 &&
                       $arg->numbodegagenera === 123;
            }))
            ->willReturn($modelResponse);
        
        // Create a partial mock for generarPDFBase64
        $controller = $this->getMockBuilder(RopaDistribucionController::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['respond', 'generarPDFBase64'])
            ->getMock();
        
        $controller->expects($this->once())
            ->method('generarPDFBase64')
            ->with($this->callback(function($arg) {
                return $arg->guia === 'BARCODE123' &&
                       strlen($arg->observaciones) <= 100;
            }))
            ->willReturn($pdfResponse);
        
        $controller->expects($this->once())
            ->method('respond')
            ->with($this->callback(function($arg) {
                return isset($arg['response']) &&
                       $arg['response']->numeroguia === 'BARCODE123' &&
                       $arg['response']->pdf === 'base64encodedpdf';
            }))
            ->willReturn(['response' => 'success']);
        
        // Set the mocked dependencies
        $this->setPrivateProperty($controller, 'modelo', $this->modelMock);
        $this->setPrivateProperty($controller, 'request', $this->requestMock);
        $this->setPrivateProperty($controller, 'logger', $this->loggerMock);
        
        // Call the method
        $result = $controller->registrarEnvioClientesRopa($cedis);
        
        // Assert the result
        $this->assertEquals(['response' => 'success'], $result);
    }

    /**
     * Test registrarEnvioClientesRopa method - with interior house number
     */
    public function testRegistrarEnvioClientesRopaWithInteriorNumber()
    {
        // Create test data
        $cedis = 123;
        $paquete = (object)[
            'numerocasa' => '123',
            'numerocasainterior' => '456',
            'observaciones' => 'Test observation',
        ];
        
        $bodegaDistribuye = (object)[
            'consecutivo' => 'CONS123',
            'numBodega' => 456,
            'numRuta' => 789,
            'numCiudadPertenece' => 101,
            'nomBodegaCorto' => 'BODEGA-TEST'
        ];
        
        $modelResponse = (object)[
            'codigobarras' => 'BARCODE123',
            'fechaservidor' => '2023-01-01',
            'fechasurtir' => '2023-01-02',
            'descripcionruta' => 'Ruta Test',
            'nombrebodega' => 'Bodega Test',
            'ciudadcliente' => 'Ciudad Test'
        ];
        
        $pdfResponse = (object)[
            'nombreArchivo' => 'etiquetaenvioclientesBARCODE123.pdf',
            'pdf' => 'base64encodedpdf'
        ];
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($paquete);
        
        // Configure model expectations
        $this->modelMock->expects($this->once())
            ->method('consultarBodegaDistribuyeRegistro')
            ->willReturn($bodegaDistribuye);
        
        $this->modelMock->expects($this->once())
            ->method('registrarEnvioClientesRopa')
            ->willReturn($modelResponse);
        
        // Create a partial mock for generarPDFBase64
        $controller = $this->getMockBuilder(RopaDistribucionController::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['respond', 'generarPDFBase64'])
            ->getMock();
        
        $controller->expects($this->once())
            ->method('generarPDFBase64')
            ->with($this->callback(function($arg) {
                return $arg->numerocasa === '123 int. #456';
            }))
            ->willReturn($pdfResponse);
        
        $controller->expects($this->once())
            ->method('respond')
            ->willReturn(['response' => 'success']);
        
        // Set the mocked dependencies
        $this->setPrivateProperty($controller, 'modelo', $this->modelMock);
        $this->setPrivateProperty($controller, 'request', $this->requestMock);
        $this->setPrivateProperty($controller, 'logger', $this->loggerMock);
        
        // Call the method
        $result = $controller->registrarEnvioClientesRopa($cedis);
        
        // Assert the result
        $this->assertEquals(['response' => 'success'], $result);
    }

    /**
     * Test registrarEnvioClientesRopa method - error path with invalid JSON
     */
    public function testRegistrarEnvioClientesRopaWithInvalidJson()
    {
        // Create test data
        $cedis = 123;
        
        // Configure request mock to throw exception
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willThrowException(new \Exception('Invalid JSON', 400));
        
        // Configure logger expectations
        $this->loggerMock->expects($this->once())
            ->method('error')
            ->with($this->stringContains('Se lanzó la excepción > Invalid JSON'));
        
        // Expect exception
        $this->expectException(HTTPException::class);
        $this->expectExceptionMessage(RopaDistribucionController::EX1);
        $this->expectExceptionCode(400);
        
        // Call the method
        $this->controller->registrarEnvioClientesRopa($cedis);
    }

    /**
     * Test registrarEnvioClientesRopa method - error path with missing bodega data
     */
    public function testRegistrarEnvioClientesRopaWithMissingBodegaData()
    {
        // Create test data
        $cedis = 123;
        $paquete = (object)[
            'numerocasa' => '123',
            'numerocasainterior' => '',
            'observaciones' => 'Test observation',
        ];
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($paquete);
        
        // Configure model to throw exception
        $this->modelMock->expects($this->once())
            ->method('consultarBodegaDistribuyeRegistro')
            ->willThrowException(new \Exception('No bodega found for this city', 404));
        
        // Configure logger expectations
        $this->loggerMock->expects($this->once())
            ->method('error')
            ->with($this->stringContains('Se lanzó la excepción > No bodega found for this city'));
        
        // Expect exception
        $this->expectException(HTTPException::class);
        $this->expectExceptionMessage(RopaDistribucionController::EX1);
        $this->expectExceptionCode(404);
        
        // Call the method
        $this->controller->registrarEnvioClientesRopa($cedis);
    }

    /**
     * Test registrarEnvioClientesRopa method - error path with database error
     */
    public function testRegistrarEnvioClientesRopaWithDatabaseError()
    {
        // Create test data
        $cedis = 123;
        $paquete = (object)[
            'numerocasa' => '123',
            'numerocasainterior' => '',
            'observaciones' => 'Test observation',
        ];
        
        $bodegaDistribuye = (object)[
            'consecutivo' => 'CONS123',
            'numBodega' => 456,
            'numRuta' => 789,
            'numCiudadPertenece' => 101,
            'nomBodegaCorto' => 'BODEGA-TEST'
        ];
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($paquete);
        
        // Configure model expectations
        $this->modelMock->expects($this->once())
            ->method('consultarBodegaDistribuyeRegistro')
            ->with($cedis, $paquete)
            ->willReturn($bodegaDistribuye);
        
        $this->modelMock->expects($this->once())
            ->method('registrarEnvioClientesRopa')
            ->willThrowException(new \Exception('Database error', 500));
        
        // Configure logger expectations
        $this->loggerMock->expects($this->once())
            ->method('error')
            ->with($this->stringContains('Se lanzó la excepción > Database error'));
        
        // Expect exception
        $this->expectException(HTTPException::class);
        $this->expectExceptionMessage(RopaDistribucionController::EX1);
        $this->expectExceptionCode(500);
        
        // Call the method
        $this->controller->registrarEnvioClientesRopa($cedis);
    }

    /**
     * Test reimpresionDeGuias method - happy path
     */
    public function testReimpresionDeGuiasSuccess()
    {
        // Create test data
        $cedis = 123;
        $json = (object)[
            'fec_emision' => '2023-01-01',
            'nom_ruta' => 'Ruta Test',
            'num_pedido' => '12345',
            'num_nota' => '67890',
            'fec_surtir' => '2023-01-02',
            'num_casainterior' => '456',
            'num_casa' => '123',
            'des_observaciones' => 'Test observation',
            'des_ciudad' => 'Ciudad Test',
            'nom_cliente' => 'Cliente Test',
            'nom_apellidopaterno' => 'Apellido1',
            'nom_apellidomaterno' => 'Apellido2',
            'nom_personarecibe' => 'Receptor Test',
            'num_telefono' => '1234567890',
            'nom_calle' => 'Calle Test',
            'nom_zona' => 'Zona Test',
            'num_codigopostal' => '12345',
            'des_estado' => 'Estado Test',
            'nombreciudad' => 'Ciudad Cliente',
            'guia' => 'GUIA123'
        ];
        
        $pdfResponse = (object)[
            'nombreArchivo' => 'etiquetaenvioclientesGUIA123.pdf',
            'pdf' => 'base64encodedpdf'
        ];
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($json);
        
        // Create a partial mock for generarPDFBase64
        $controller = $this->getMockBuilder(RopaDistribucionController::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['respond', 'generarPDFBase64'])
            ->getMock();
        
        $controller->expects($this->once())
            ->method('generarPDFBase64')
            ->with($this->callback(function($arg) {
                return $arg->numerocasa === '123 int. #456' &&
                       $arg->fechaservidor === '01/01/2023' &&
                       $arg->fechasurtir === '02/01/2023' &&
                       $arg->nombrecliente === 'Cliente Test' &&
                       $arg->observaciones === 'Test observation';
            }))
            ->willReturn($pdfResponse);
        
        $controller->expects($this->once())
            ->method('respond')
            ->with($this->callback(function($arg) {
                return isset($arg['response']) &&
                       $arg['response']->nombre === 'etiquetaenvioclientesGUIA123.pdf' &&
                       $arg['response']->base64Doc === 'base64encodedpdf';
            }))
            ->willReturn(['response' => 'success']);
        
        // Set the mocked dependencies
        $this->setPrivateProperty($controller, 'modelo', $this->modelMock);
        $this->setPrivateProperty($controller, 'request', $this->requestMock);
        $this->setPrivateProperty($controller, 'logger', $this->loggerMock);
        
        // Call the method
        $result = $controller->reimpresionDeGuias($cedis);
        
        // Assert the result
        $this->assertEquals(['response' => 'success'], $result);
    }

    /**
     * Test reimpresionDeGuias method - with zero interior number
     */
    public function testReimpresionDeGuiasWithZeroInteriorNumber()
    {
        // Create test data
        $cedis = 123;
        $json = (object)[
            'fec_emision' => '2023-01-01',
            'nom_ruta' => 'Ruta Test',
            'num_pedido' => '12345',
            'num_nota' => '67890',
            'fec_surtir' => '2023-01-02',
            'num_casainterior' => '0',  // Zero interior number
            'num_casa' => '123',
            'des_observaciones' => 'Test observation',
            'des_ciudad' => 'Ciudad Test',
            'nom_cliente' => 'Cliente Test',
            'nom_apellidopaterno' => 'Apellido1',
            'nom_apellidomaterno' => 'Apellido2',
            'nom_personarecibe' => 'Receptor Test',
            'num_telefono' => '1234567890',
            'nom_calle' => 'Calle Test',
            'nom_zona' => 'Zona Test',
            'num_codigopostal' => '12345',
            'des_estado' => 'Estado Test',
            'nombreciudad' => 'Ciudad Cliente',
            'guia' => 'GUIA123'
        ];
        
        $pdfResponse = (object)[
            'nombreArchivo' => 'etiquetaenvioclientesGUIA123.pdf',
            'pdf' => 'base64encodedpdf'
        ];
        
        // Configure request mock
        $this->requestMock->expects($this->once())
            ->method('getJsonRawBody')
            ->willReturn($json);
        
        // Create a partial mock for generarPDFBase64
        $controller = $this->getMockBuilder(RopaDistribucionController::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['respond', 'generarPDFBase64'])
            ->getMock();
        
        $controller->expects($this->once())
            ->method('generarPDFBase64')
            ->with($this->callback(function($arg) {
                // Should not have modified the house number
                return $arg->numerocasa === '123';
            }))
            ->willReturn($pdfResponse);
        
        $controller->expects($this->once())
            ->method('respond')
            ->willReturn(['response' => 'success']);
        
        // Set the mocked dependencies
        $this->setPrivateProperty($controller, 'modelo', $this->modelMock);
        $this->setPrivateProperty($controller, 'request', $this->requestMock);
        $this->setPrivateProperty($controller, 'logger', $this->loggerMock);
        
        // Call the method
        $result = $controller->reimpresionDeGuias($cedis);
        
        // Assert the result
        $this->assertEquals(['response' => 'success'], $result);
    }

    /**
     * Test reimpresionDeGuias method - with long observations
     */
    public function testReimpresionDeGuiasWithLongObservations()
    {
        // Create test data
        $cedis = 123;
        $longObservation = str_repeat('A', 200); // 200 characters
        $json = (object)[
            'fec_emision' => '2023-01-01',
            'nom_ruta' => 'Ruta Test',
            'num_pedido' => '12345',
            'num_nota' => '67890',
            'fec_surtir' => '2023-01-02',
            'num_casainterior' => '',
            'num_casa' => '123',
            'des_observaciones' => $longObservation,
            'des_ciudad' => 'Ciudad Test',
            'nom_cliente' => 'Cliente Test',
            'nom_apellidopaterno' => 'Apellido1',
            'nom_apellidomaterno' => 'Apellido2',
            'nom_personarecibe'

